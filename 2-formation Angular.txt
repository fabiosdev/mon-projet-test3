
CREER NOUVEAU PROJET :

1 - Run terminal
2 - cd « /users/JOB314/angular-projets/« 
3 - ng new nom-du-projet (crée le nouveau dossier avec les imports angular CLI
    (on peut directement taper «  ng new nom-du-projet —style=scss —skip-tests=true » , afin de préciser le langage scss dès le début et annuler la création de fichiers test)
4 -npm install bootstrap@3.3.7 —save (installation de boostrap)
5 - npm install jquery@1.9.1 --save (installation de la version jquery requise par boottrap)
6 - npm install popper.js@^1.14.7 —save (installation de la version de popperjs requise par boostrap)
7 - dans angular.json : « architect/buid/styles, lier le css bootstrap : « node_modules/boostrap/dist/css/bootstrap.css »
8 - ng serve (ou ng serve —open pour lancer le serveur et ouvrir directement le navigateur en localhost:4200/)

——————

MEMO Structure CLI :

A - Le dossier « e2e » est dédié aux tests « end-to-end »
B - Le dossier node_modules : contient toutes les dépendances pour l’appi (fichiers sources angular et typescript)
C - src/app/appcomponent (html/scss/ts…) : component principal ou tous les autres components seront imbriqués)
  • app.components.ts : fichier typescript qui contient touts les components principaux
   (- on les déclare  : import { Component } from ‘@angular/core’;)
   (- on crée le « décorateur » du component en précisant le nom du sélecteur / le chemin d’accès du fichier Html / le chemin d’accès au style css.) comme ceci : 

		@Component ({ 
    			selector: «’app-root’,
    			templateUrl: ‘./app.component.html’,
    			styleUrls: [‘./app.component.scss’]
		  }]

*Le sélecteur ‘app-root’ est nommé avec le préfixe « app » pour se distinguer des sélecteurs html classiques.

* Génération d’un nouveau component, 
   • Se déconnecter du serveur (^C ) 
   • ng generate component nom-du-component
   • CLI crée un dossier dans « app » (avec fichier lié html/scss/spec.ts/.ts)
   • CLI met à jour  app.module.ts (import et @ngModule déclaration)

* Utilisation d’un nouveau component : 
  • créer le sélecteur dans la page html (app.component.html) -> « <app-nom-du-component></

* la synthaxe pour les interpolations s’inscrit dans une double accolade {{ expressionTypescript }}
 (pour l’affichage d’une expression typescript dans une balise html (ex. title…ext)
 
Méthode d’utilisation : 

* 1 - création du nouveau component
  2 - Ouvrir le fichier html du component
  3 - taper le nom d’une variable entre double accolade à l’endroit souhaité dans ce fichier html
  4 - Ouvrir le fichier ts du component 
  5 - dans « export class « nomDuComponent », au dessus du constructor, on déclare la variable que l’on vient d’appeler dans le fichier html : expressionTypescript : string = « Message »;

* dans le fichier ts du component, on peut créer n’importe quelle variable et la relier au fichier html

*Property binding : Communication dynamique entre le ts et le template (pour modifier dynamiquement les propriétés d’un élément DOM en fonctions des données ts)
* Pour lier une propriété html au typescript, il faut la mettre en crochets [ ] (exemple ( <button [disabled]></button> )

*Event binding : On peut rajouter un évènement (exemple un click event sur un bouton) => (click)=« onAllumer() » (les parenthèses « () » créent la liaison avec l’évenement
 Ensuite dans le ts il faut créer la variable « onAllumer() {}

*two-way binding : (liaison à double sens) => par propriété et event en même temps. Pour cela, il faut importer FormsModule dans app.module.ts 
 • import { FormsModule } from ‘@angular/forms’; en haut du fichier rajouter la variable FormsModule dans imports.
 • Dans l’appel d’une variable en two-way-binding, la synthaxe mélange les crochets et les parenthèses comme ceci [()] exemple : 
  <input type=« text » class=« form-control» [(ngModel)]=« appareilName»>

*Les directives structurelles : modifient la structure du document (ex : *ngIf / *ngFor, pour itérer des données dans un array)
 • exemple *ngIf=« condittion » : <div style=« width:20px;height;20px;background-color:red; » *ngIf=« appareilStatus ===‘éteint’ »></div>
 • exemple *ngFor : (1- on crée les variables 2- on l’appelle avec cette synthaxe : *ngFor=« let variable of variables », suvi du nom des variables déclarées dans le ts)
  (comme dans un for loop classique, itère pour chaque élément « variable » de l’array « variables ».)
   
  <app-appareil *ngfor=« let variable of variables » [variableName]=« variable.name [variableStatus]=« variable.status »></app-appareil>

* Les directives par attribut : (style  / class…) => ngStyle / ngClass …
  Exemple : <h4 [ngStyle]=«{color:getColor() }»

* Les pipes (modifier des données en temps réel => exemple, date format…) 

* Les services : Permettent de centraliser des parties de code et des données pour ne pas devoir les dupliquer plusieurs fois, faciliter la maintenance, la lisibilité et stabilité, avoir un code plus fonctionnel et modulaire.
(comme par exemple des données sur des objets , ou des fonctions ..)
 On peut les injecter dans 3 niveaux différents : 
• Dans AppModule (si on veut que le service englobe toute l’application)
• Dans AppComponent (si on veut que tous les components aient accès au service)
• Dans un autre component (si l’on ne veut ouvrir l’accès à ce service qu’à un component spécifique)

	UTILISATION D’UN SERVICE : MÉTHODE 1 (simple) : 

	1 - Se placer dans le dossier src/app
	2 - ng generate service nomDuService
	3 - Dans nomDuService.ts : export class => couper/ coller dedans la partie du code que l’on veut y relier
	4 - Dans app.module.ts : import { nomDuService } from ‘@angular/core’;  + déclarer nomDuService dans l’array provider []
	5 - Dans app.component.ts : 
	     • Relier nomDuService au constructeur si nécessaire
	     • import { nomDuService } from ‘.service/variable.service’;
	     • Rajouter OnInit dans import @angular/core tout en haut
	     • implements OnInit dans export class
	     • Toujours dans export class : Déclarer appareils:any[] comme array de type « any » 
	6 - Sous le constructeur, créer la méthode ngOnInit pour récupérer les infos de nomDuService : ngOnInit() { this.variables = this.nomDuService.variables; }


* Le routing : Créer par exemple des single page application (SPA) : Applications rapides, lisses, 1 seul chargement de page au début, comme une appli native. Le routing lit le contenu de l’URL pour afficher le ou les components requis.
 • On déclare les routes dans app.module.ts
 • routerLink : permet de naviguer dans l’application (remplace l’attribut href)
 • Penser aux redirections 404.
 • Guard : exécuter du code avant qu'un utilisateur puisse accéder à une route ; par exemple, vous pouvez souhaiter vérifier son authentification ou son identité. Une guard est en effet un service qu'Angular exécutera au moment où l'utilisateur essaye de naviguer vers la route sélectionnée
 • Observables : Très simplement, un Observable est un objet qui émet des informations auxquelles on souhaite réagir.  Ces informations peuvent venir d'un champ de texte dans lequel l'utilisateur rentre des données, ou de la progression d'un chargement de fichier, par exemple.  Elles peuvent également venir de la communication avec un serveur : le client HTTP

* Les formulaires 2 grandes méthodes en angular :
 • La méthode template : on crée le formulaire dans le template et angular le traite
 • La méthode réactive : On crée le formulaire en typescript et dans le template, puis on fait la liaison manuellement
   NB : Dans la méthode template, l'objet formulaire est de type NgForm, dans la methoe réactive, il est de type FormGroup

* Firebase : 
 • Aller sur firebase.com (login by google count)
 • Créer un nouveau projet
 • Aller au tableau de bord / Database / Realtime Database / Mode test (read: true , write: true)
 • Importer HttpClientModule dans app.module.ts (from '@angular/common/http';) / dans Imports[] )
 • Importer le http client à l'endroit souhaité (import { HttpClient } from '@angular/common/http'; et dans le constructeur : constructor(private httpClient: HttpClient) { })


